# Display the type of x
print(typeof(x))
# Method 3
x<-c(TRUE,FALSE,TRUE,FALSE,TRUE)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 1
x<-vector("character", length=5)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 3
x<-c('A','b','r','q')
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 1
x<-vector("integer",length=5)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 2
x<-integer(5)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 5
x<-1:5
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 1
x<-vector("double",length=5)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 2
x<-double(5)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 3
x<-c(1.787,0.63573,2.3890)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Create a vector
x <- c(1.8)
# Check the type of x
typeof(x)
# Add a character to the vector
x <- c(x,'a')
# Check the type of x
typeof(x)
# Create a vector
x <- c(TRUE)
# Check the type of x
typeof(x)
# Add a number to the vector
x <- c(x,2)
# Check the type of x
typeof(x)
# Create a vector
x <- c('a')
# Check the type of x
typeof(x)
# Add a logical value to the vector
x <- c(x,TRUE)
# Check the type of x
typeof(x)
# Create a vector
x <- c(1L)
# Check the type of x
typeof(x)
# Add a number to the vector
x <- c(x,2)
# Check the type of x
typeof(x)
# Create a vector
x <- c(1L)
# Check the type of x
typeof(x)
# Convert the vector to type character
x <- as.character(x)
# Check the type of x
typeof(x)
# Create a vector
x <- c('A')
# Check the type of x
typeof(x)
# Convert the vector to type double
x <- as.numeric(x)
# Check the type of x
typeof(x)
# Create a vector
x <- c(1,10,9,8,1,3,5)
# Access one element with index 3
x[3]
# Access elements with consecutive indices, 2 to 4: 2,3,4
x[2:4]
# Access elements with non-consecutive indices, 1,3,5
x[c(1,3,5)]
# Access elements using logical vector
x[c(TRUE,FALSE,FALSE,TRUE,FALSE,FALSE,TRUE)]
# Access elements using the conditional operator <
x[x<10]
# Display the length of the vector
print(length(x))
# Display the type of the vector
print(typeof(x))
# Display the structure of the vector
print(str(x))
# Initialise a named list
my_pie = list(type="key lime", diameter=7, is.vegetarian=TRUE)
# display the list
my_pie
# Print the names of the list
names(my_pie)
# Retrieve the element named type
my_pie$type
# Retrieve a truncated list
my_pie["type"]
# Retrieve the element named type
my_pie[["type"]]
# Install package
install.packages("openintro")
# Load the package
library(openintro)
# Load package
library(tidyverse)
# Catch a glimpse of the data-set: see how the rows are stacked one below another
glimpse(loans_full_schema)
# Selecting numeric variables
loans <- loans_full_schema %>% # <-- pipe operator
select(paid_total, term, interest_rate,
annual_income,paid_late_fees,debt_to_income)
# View the columns stacked one below another
glimpse(loans)
# Selecting categoric variables
loans <- loans_full_schema %>%
select(grade,state,homeownership,disbursement_method ) # type the chosen columns as in the lecture slide
# View the columns stacked one below another
glimpse(loans)
install.packages("openintro")
knitr::opts_chunk$set(echo = TRUE)
# Install package
install.packages("openintro")
# Load the package
library(openintro)
# Load package
library(tidyverse)
# Catch a glimpse of the data-set: see how the rows are stacked one below another
glimpse(loans_full_schema)
# Catch a glimpse of the data-set: see how the rows are stacked one below another
glimpse(loans_full_schema)
# Catch a glimpse of the data-set: see how the rows are stacked one below another
glimpse(loans_full_schema)
# Install package
install.packages("openintro")
# Load the package
library(openintro)
# Load package
library(tidyverse)
install.packages("openintro")
# Install package
# Load the package
library(openintro)
# Load package
library(tidyverse)
# Install package
# Load the package
library(openintro)
# Load package
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
# Enter code here
x<-c(25,30,22,28,33)
print(x)
typeof(x)
# Enter code here
x<-c(25,30,22,28,33)
print(x)
# Enter code here
ages<-c(25,30,22,28,33)
print(ages)
# Enter code here
student_info = list("Alice"=85=TRUE, "Bob"=92=TRUE, "Catherine"=78=FALSE)
# Enter code here
student_info = list("Alice"=85=TRUE, "Bob"=92=TRUE, "Catherine"=78=FALSE)
# Enter code here
student_info = list(type="Alice"=85=TRUE, type="Bob"=92=TRUE, type="Catherine"=78=FALSE)
# Enter code here
student_info = list(Alice=85=TRUE, Bob=92=TRUE, Catherine=78=FALSE)
# Enter code here
student_info = list(name=Alice, score=85, passed=TRUE)
# Enter code here
student_info = list(name="Alice", score=85, passed=TRUE)
print(student_info)
# Enter code here
student_info = list(name="Alice", score=85, passed=TRUE), list(name="Bob", score=92, passed=TRUE)
# Enter code here
student_info = list(name="Alice", score=85, passed=TRUE) , list(name="Bob", score=92, passed=TRUE)
# Enter code here
x <- c(10)
typeof(x)
# Enter code here
x <- c(10)
typeof(x)
x <- c(15.5)
typeof(x)
# Enter code here
x <- c(10)
typeof(x)
x <- c(15.5)
typeof(x)
x <- c("20")
typeof(x)
# Enter code here
x <- c(20.5,15,"25")
x <- as.numeric(x)
# Enter code here
x <- c(20.5,15,"25")
x <- as.numeric(x)
# Enter code here
student_info = list(name="Alice", score=85, passed=TRUE)
student_info = list(name="Bob", score=92, passed=TRUE)
print(student_info)
# Enter code here
x <- c(20.5,15,"25")
x <- as.numeric(x)
print(x)
# Enter code here
student_info <- list(name=c("Alice","Bob","Catherine"), score=c(85,92,78), passed=c(TRUE, TRUE, FALSE))
print(student_info)
# Enter code here
x <- c(5,10,15), c("apple","banana", "cherry")
# Enter code here
x <- c(5,10,15), c("apple","banana", "cherry")
# Enter code here
x <- c(5,10,15,"apple","banana", "cherry")
print(x)
# Enter code here
x <- c(7, 12.5,"15.7")
sum(x)
# Enter code here
x <- c(7, 12.5,"15.7")
print(x)
# Enter code here
x <- c(7, 12.5,"15.7")
x <- as.numeric(x)
print(x)
# Enter code here
x <- c(7, 12.5,"15.7")
x <- as.numeric(x)
sum(x)
print(x)
# Enter code here
x <- c(7, 12.5,"15.7")
x <- as.numeric(x)
sum(x)
# Enter code here
x <-c(85, 90.5, "75.2")
# Enter code here
x <-c(85, 90.5, "75.2")
mean(x)
# Enter code here
x <-c(85, 90.5, "75.2")
x <- as.numeric(x)
mean(x)
# Enter code here
mixed_data <- list(numeric=c(10,20,30), character=c("red", "green", "blue"), logical=c(TRUE,FALSE,TRUE))
# Enter code here
mixed_data <- list(numeric=c(10,20,30), character=c("red", "green", "blue"), logical=c(TRUE,FALSE,TRUE))
print(x)
# Enter code here
mixed_data <- list(numeric=c(10,20,30), character=c("red", "green", "blue"), logical=c(TRUE,FALSE,TRUE))
print(mixed_data)
# Enter code here
mixed_data <- list(numeric=c(10,20,30), character=c("red", "green", "blue"), logical=c(TRUE,FALSE,TRUE))
mean(numeric)
print(mixed_data)
# Enter code here
mixed_data <- list(numeric=c(10,20,30), character=c("red", "green", "blue"), logical=c(TRUE,FALSE,TRUE))
mean(numeric=c(10,20,30))
# Enter code here
mixed_data <- list(numeric=c(10,20,30), character=c("red", "green", "blue"), logical=c(TRUE,FALSE,TRUE))
print(mixed_data)
# Enter code here
mixed_data <- list(numeric=c(10,20,30), character=c("red", "green", "blue"), logical=c(TRUE,FALSE,TRUE))
print(mixed_data)
x <- (10,20,30)
# Enter code here
mixed_data <- list(numeric=c(10,20,30), character=c("red", "green", "blue"), logical=c(TRUE,FALSE,TRUE))
print(mixed_data)
x <- c(10,20,30)
mean(x)
print(x)
# Enter code here
mixed_data <- list(numeric=c(10,20,30), character=c("red", "green", "blue"), logical=c(TRUE,FALSE,TRUE))
print(mixed_data)
x <- c(10,20,30)
mean(x)
# Enter code here
mixed_data <- list(numeric=c(10,20,30), character=c("red", "green", "blue"), logical=c(TRUE,FALSE,TRUE))
print(mixed_data)
mean <- c(10,20,30)
mean(mean)
# Enter code here
mixed_data <- list(numeric=c(10,20,30), character=c("red", "green", "blue"), logical=c(TRUE,FALSE,TRUE))
print(mixed_data)
x <- mean=c(10,20,30)
# Enter code here
mixed_data <- list(numeric=c(10,20,30), character=c("red", "green", "blue"), logical=c(TRUE,FALSE,TRUE))
print(mixed_data)
x <- mean=c(10,20,30)
# Enter code here
mixed_data <- list(numeric=c(10,20,30), character=c("red", "green", "blue"), logical=c(TRUE,FALSE,TRUE))
print(mixed_data)
x <- c(10,20,30)
mean(x)
# Enter code here
Bob <- student_info %>% select("Bob", 92, TRUE)
# Enter code here
Bob <- student_info %>%select("Bob", 92, TRUE)
# Enter code here
Bob <- student_info %>% select("Bob", 92, TRUE)
# Enter code here
Bob <- student_info %>% select("Bob", 92, TRUE)
# Enter code here
Bob <- student_info %>% select("Bob", 92, TRUE)
# Enter code here
glimpse("Bob"")
# Enter code here
glimpse("Bob")
# Enter code here
student_info["Bob"]
# Enter code here
mixed_data <- list(numeric=c(10,20,30), character=c("red", "green", "blue"), logical=c(TRUE,FALSE,TRUE))
print(mixed_data)
mean(mixed_data$numeric)
# Enter code here
student_info$score
student_info
student_info$score
student_info$score[2]
student_info$name
student_info$name == "Bob"
which(tudent_info$name == "Bob")
which(student_info$name == "Bob")
student_info$score[which(student_info$name == "Bob")]
# Enter code here
student_info$score[2]
# Enter code here
x <- c(1,2,3,4,5,6)
print(x)
# Enter code here
x <- c(1,2,3,4,5,6)
print(x$[6])
# Enter code here
x <- c(1,2,3,4,5,6)
print(x$[6])
# Enter code here
x <- c(1,2,3,4,5,6)
last_element <- tail(my_vector, n = 1)
# Enter code here
x <- c(1,2,3,4,5,6)
last_element <- tail(x, n = 1)
# Enter code here
x <- c(1,2,3,4,5,6)
last_element <- tail(x, n = 1)
print(last_element)
# Enter code here
words <- c("apple", "banana", "cherry", "apple")
words == "apple"
# Enter code here
words <- c("apple", "banana", "cherry", "apple")
words == "apple"
which(words == "apple")
# Enter code here
ages[ages>30]
# Enter code here
x <- 1:5
x<-seq(from=1,to=20,by=3)
print(x)
# Enter code here
x <- 1:5
x<-seq(from=1,to=20,by=2)
print(x)
# Enter code here
x <- 1:20
x<-seq(from=1,to=20,by=2)
print(x)
# Enter code here
x <- 1:20
x<-seq(from=3,to=20,by=2)
print(x)
# Enter code here
x <- 1:20
x<-seq(from=3,to=20,by=3)
print(x)
# Enter code here
x <- 1:10
x<-seq(from=4,to=8,by=1)
# Enter code here
x <- 1:10
x<-seq(from=4,to=8,by=1)
print(x)
# Enter code here
x <- c(10, NA, 15, 20)
x == "NA"
# Enter code here
x <- c(10, NA, 15, 20)
x == NA
# Enter code here
x <- c(10, NA, 15, 20)
x == "NA"
# Enter code here
x <- c(10, NA, 15, 20)
x == "NA"
which(x == "NA")
# Enter code here
x <- c(10, NA, 15, 20)
x == "NA"
# Enter code here
x <- c(10, NA, 15, 20)
x == "NA"
which(x == "NA")
# Enter code here
x <- c(10, NA, 15, 20)
is.na(x)
# Enter code here
hot_days <- logical(hot_days>90)
# Enter code here
temperature <- c(88, 92, 87, 95, 89, 91, 86, 97, 93, 88)
hot_days <- temperature > 90
# Enter code here
temperature <- c(88, 92, 87, 95, 89, 91, 86, 97, 93, 88)
hot_days <- temperature > 90
# Enter code here
temperature <- c(88, 92, 87, 95, 89, 91, 86, 97, 93, 88)
hot_days <- temperature > 90
print(temperature)
# Enter code here
temperature <- c(88, 92, 87, 95, 89, 91, 86, 97, 93, 88)
hot_days <- temperature > 90
print(hot_days)
# Enter code here
temperature <- c(88, 92, 87, 95, 89, 91, 86, 97, 93, 88)
hot_days <- temperature > 90
print(hot_days)
num_hot_days <- sum(hot_days)
# Enter code here
temperature <- c(88, 92, 87, 95, 89, 91, 86, 97, 93, 88)
hot_days <- temperature > 90
print(hot_days)
num_hot_days <- sum(hot_days)
# Enter code here
temperature <- c(88, 92, 87, 95, 89, 91, 86, 97, 93, 88)
hot_days <- temperature > 90
print(hot_days)
num_hot_days <- sum(hot_days)
print(sum(hot_days))
# Enter code here
fruits <- c("apple", "banana", "strawberry", "kiwi", "pineapple", "grapes")
long_names <- nchar(fruits) > 6
long_fruit_names <- fruits[long_names]
# Enter code here
fruits <- c("apple", "banana", "strawberry", "kiwi", "pineapple", "grapes")
long_names <- nchar(fruits) > 6
long_fruit_names <- fruits[long_names]
print(long_fruit_names)
# Enter code here
numbers <- c(10, 15, 8, 25, 30, 17, 20)
divisible_by_5 <- numbers %% 5 == 0
# Enter code here
numbers <- c(10, 15, 8, 25, 30, 17, 20)
divisible_by_5 <- numbers %% 5 == 0
print(divisible_by_5)
# Enter code here
numbers <- c(10, 15, 8, 25, 30, 17, 20)
divisible_by_5 <- numbers %% 5 == 0
# Enter code here
numbers <- c(10, 15, 8, 25, 30, 17, 20)
divisible_by_5 <- numbers %% 5 == 0
# Enter code here
numbers <- c(10, 15, 8, 25, 30, 17, 20)
divisible_by_5 <- numbers %% 5 == 0
print(divisble_by_5)
# Enter code here
numbers <- c(10, 15, 8, 25, 30, 17, 20)
divisible_by_5 <- numbers %% 5 == 0
print(divisible_by_5)
# Enter code here
numbers <- c(10, 15, 8, 25, 30, 17, 20)
divisible_by_5 <- numbers %% 5 == 0
divide <- numbers[divisible_by_5]
print(divide)
# Enter code here
vector1 <- c(5, 10, 15, 20, 25)
vector2 <- c(3, 8, 12, 18, 22)
comparison <- vector1 > vector2
print(comparison)
